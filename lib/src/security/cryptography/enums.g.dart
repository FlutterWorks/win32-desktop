/// {@category Enum}
class BCRYPT_DH_KEY_BLOB_MAGIC {
  static const BCRYPT_DH_PUBLIC_MAGIC = 0x42504844;
  static const BCRYPT_DH_PRIVATE_MAGIC = 0x56504844;
}

/// {@category Enum}
class BCRYPT_DSA_MAGIC {
  static const BCRYPT_DSA_PUBLIC_MAGIC = 0x42505344;
  static const BCRYPT_DSA_PRIVATE_MAGIC = 0x56505344;
}

/// {@category Enum}
class BCRYPT_HASH_OPERATION_TYPE {
  static const BCRYPT_HASH_OPERATION_HASH_DATA = 0x00000001;
  static const BCRYPT_HASH_OPERATION_FINISH_HASH = 0x00000002;
}

/// {@category Enum}
class BCRYPT_INTERFACE {
  static const BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 0x00000003;
  static const BCRYPT_CIPHER_INTERFACE = 0x00000001;
  static const BCRYPT_HASH_INTERFACE = 0x00000002;
  static const BCRYPT_RNG_INTERFACE = 0x00000006;
  static const BCRYPT_SECRET_AGREEMENT_INTERFACE = 0x00000004;
  static const BCRYPT_SIGNATURE_INTERFACE = 0x00000005;
  static const NCRYPT_KEY_STORAGE_INTERFACE = 0x00010001;
  static const NCRYPT_SCHANNEL_INTERFACE = 0x00010002;
  static const NCRYPT_SCHANNEL_SIGNATURE_INTERFACE = 0x00010003;
}

/// {@category Enum}
class BCRYPT_MULTI_OPERATION_TYPE {
  static const BCRYPT_OPERATION_TYPE_HASH = 0x00000001;
}

/// {@category Enum}
class BCRYPT_OPEN_ALGORITHM_PROVIDER_FLAGS {
  static const BCRYPT_ALG_HANDLE_HMAC_FLAG = 0x00000008;
  static const BCRYPT_PROV_DISPATCH = 0x00000001;
  static const BCRYPT_HASH_REUSABLE_FLAG = 0x00000020;
}

/// {@category Enum}
class BCRYPT_OPERATION {
  static const BCRYPT_CIPHER_OPERATION = 0x00000001;
  static const BCRYPT_HASH_OPERATION = 0x00000002;
  static const BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 0x00000004;
  static const BCRYPT_SECRET_AGREEMENT_OPERATION = 0x00000008;
  static const BCRYPT_SIGNATURE_OPERATION = 0x00000010;
  static const BCRYPT_RNG_OPERATION = 0x00000020;
}

/// {@category Enum}
class BCRYPT_QUERY_PROVIDER_MODE {
  static const CRYPT_ANY = 0x00000004;
  static const CRYPT_UM = 0x00000001;
  static const CRYPT_KM = 0x00000002;
  static const CRYPT_MM = 0x00000003;
}

/// {@category Enum}
class BCRYPT_RESOLVE_PROVIDERS_FLAGS {
  static const CRYPT_ALL_FUNCTIONS = 0x00000001;
  static const CRYPT_ALL_PROVIDERS = 0x00000002;
}

/// {@category Enum}
class BCRYPT_RSAKEY_BLOB_MAGIC {
  static const BCRYPT_RSAPUBLIC_MAGIC = 0x31415352;
  static const BCRYPT_RSAPRIVATE_MAGIC = 0x32415352;
  static const BCRYPT_RSAFULLPRIVATE_MAGIC = 0x33415352;
}

/// {@category Enum}
class BCRYPT_TABLE {
  static const CRYPT_LOCAL = 0x00000001;
  static const CRYPT_DOMAIN = 0x00000002;
}

/// {@category Enum}
class CASetupProperty {
  static const ENUM_SETUPPROP_INVALID = 0xffffffff;
  static const ENUM_SETUPPROP_CATYPE = 0x00000000;
  static const ENUM_SETUPPROP_CAKEYINFORMATION = 0x00000001;
  static const ENUM_SETUPPROP_INTERACTIVE = 0x00000002;
  static const ENUM_SETUPPROP_CANAME = 0x00000003;
  static const ENUM_SETUPPROP_CADSSUFFIX = 0x00000004;
  static const ENUM_SETUPPROP_VALIDITYPERIOD = 0x00000005;
  static const ENUM_SETUPPROP_VALIDITYPERIODUNIT = 0x00000006;
  static const ENUM_SETUPPROP_EXPIRATIONDATE = 0x00000007;
  static const ENUM_SETUPPROP_PRESERVEDATABASE = 0x00000008;
  static const ENUM_SETUPPROP_DATABASEDIRECTORY = 0x00000009;
  static const ENUM_SETUPPROP_LOGDIRECTORY = 0x0000000a;
  static const ENUM_SETUPPROP_SHAREDFOLDER = 0x0000000b;
  static const ENUM_SETUPPROP_PARENTCAMACHINE = 0x0000000c;
  static const ENUM_SETUPPROP_PARENTCANAME = 0x0000000d;
  static const ENUM_SETUPPROP_REQUESTFILE = 0x0000000e;
  static const ENUM_SETUPPROP_WEBCAMACHINE = 0x0000000f;
  static const ENUM_SETUPPROP_WEBCANAME = 0x00000010;
}

/// {@category Enum}
class CEPSetupProperty {
  static const ENUM_CEPSETUPPROP_AUTHENTICATION = 0x00000000;
  static const ENUM_CEPSETUPPROP_SSLCERTHASH = 0x00000001;
  static const ENUM_CEPSETUPPROP_URL = 0x00000002;
  static const ENUM_CEPSETUPPROP_KEYBASED_RENEWAL = 0x00000003;
}

/// {@category Enum}
class CERT_BIOMETRIC_DATA_TYPE {
  static const CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE = 0x00000001;
  static const CERT_BIOMETRIC_OID_DATA_CHOICE = 0x00000002;
}

/// {@category Enum}
class CERT_CHAIN_POLICY_FLAGS {
  static const CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG = 0x00000001;
  static const CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG = 0x00000002;
  static const CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG = 0x00000004;
  static const CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS = 0x00000007;
  static const CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG =
      0x00000008;
  static const CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG = 0x00000010;
  static const CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG = 0x00000020;
  static const CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG = 0x00000040;
  static const CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG = 0x00000080;
  static const CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG = 0x00000100;
  static const CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG =
      0x00000200;
  static const CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG = 0x00000400;
  static const CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG = 0x00000800;
  static const CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS = 0x00000f00;
  static const CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG = 0x00008000;
  static const CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG = 0x00004000;
  static const CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG =
      0x00002000;
  static const CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG = 0x00001000;
}

/// {@category Enum}
class CERT_CONTROL_STORE_FLAGS {
  static const CERT_STORE_CTRL_COMMIT_FORCE_FLAG = 0x00000001;
  static const CERT_STORE_CTRL_COMMIT_CLEAR_FLAG = 0x00000002;
  static const CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG = 0x00000001;
}

/// {@category Enum}
class CERT_CREATE_SELFSIGN_FLAGS {
  static const CERT_CREATE_SELFSIGN_NO_KEY_INFO = 0x00000002;
  static const CERT_CREATE_SELFSIGN_NO_SIGN = 0x00000001;
}

/// {@category Enum}
class CERT_FIND_CHAIN_IN_STORE_FLAGS {
  static const CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG = 0x00000001;
  static const CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG = 0x00000002;
  static const CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG = 0x00008000;
  static const CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG = 0x00000004;
  static const CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG = 0x00000008;
  static const CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG = 0x00004000;
}

/// {@category Enum}
class CERT_FIND_FLAGS {
  static const CERT_FIND_ANY = 0x00000000;
  static const CERT_FIND_CERT_ID = 0x00100000;
  static const CERT_FIND_CTL_USAGE = 0x000a0000;
  static const CERT_FIND_ENHKEY_USAGE = 0x000a0000;
  static const CERT_FIND_EXISTING = 0x000d0000;
  static const CERT_FIND_HASH = 0x00010000;
  static const CERT_FIND_HAS_PRIVATE_KEY = 0x00150000;
  static const CERT_FIND_ISSUER_ATTR = 0x00030004;
  static const CERT_FIND_ISSUER_NAME = 0x00020004;
  static const CERT_FIND_ISSUER_OF = 0x000c0000;
  static const CERT_FIND_ISSUER_STR = 0x00080004;
  static const CERT_FIND_KEY_IDENTIFIER = 0x000f0000;
  static const CERT_FIND_KEY_SPEC = 0x00090000;
  static const CERT_FIND_MD5_HASH = 0x00040000;
  static const CERT_FIND_PROPERTY = 0x00050000;
  static const CERT_FIND_PUBLIC_KEY = 0x00060000;
  static const CERT_FIND_SHA1_HASH = 0x00010000;
  static const CERT_FIND_SIGNATURE_HASH = 0x000e0000;
  static const CERT_FIND_SUBJECT_ATTR = 0x00030007;
  static const CERT_FIND_SUBJECT_CERT = 0x000b0000;
  static const CERT_FIND_SUBJECT_NAME = 0x00020007;
  static const CERT_FIND_SUBJECT_STR = 0x00080007;
  static const CERT_FIND_CROSS_CERT_DIST_POINTS = 0x00110000;
  static const CERT_FIND_PUBKEY_MD5_HASH = 0x00120000;
  static const CERT_FIND_SUBJECT_STR_A = 0x00070007;
  static const CERT_FIND_SUBJECT_STR_W = 0x00080007;
  static const CERT_FIND_ISSUER_STR_A = 0x00070004;
  static const CERT_FIND_ISSUER_STR_W = 0x00080004;
  static const CERT_FIND_SUBJECT_INFO_ACCESS = 0x00130000;
  static const CERT_FIND_HASH_STR = 0x00140000;
  static const CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG = 0x00000001;
  static const CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG = 0x00000002;
  static const CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG = 0x00000004;
  static const CERT_FIND_NO_ENHKEY_USAGE_FLAG = 0x00000008;
  static const CERT_FIND_OR_ENHKEY_USAGE_FLAG = 0x00000010;
  static const CERT_FIND_VALID_ENHKEY_USAGE_FLAG = 0x00000020;
  static const CERT_FIND_OPTIONAL_CTL_USAGE_FLAG = 0x00000001;
  static const CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG = 0x00000002;
  static const CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG = 0x00000004;
  static const CERT_FIND_NO_CTL_USAGE_FLAG = 0x00000008;
  static const CERT_FIND_OR_CTL_USAGE_FLAG = 0x00000010;
  static const CERT_FIND_VALID_CTL_USAGE_FLAG = 0x00000020;
}

/// {@category Enum}
class CERT_FIND_TYPE {
  static const CTL_FIND_ANY = 0x00000000;
  static const CTL_FIND_SHA1_HASH = 0x00000001;
  static const CTL_FIND_MD5_HASH = 0x00000002;
  static const CTL_FIND_USAGE = 0x00000003;
  static const CTL_FIND_SAME_USAGE_FLAG = 0x00000001;
  static const CTL_FIND_EXISTING = 0x00000005;
  static const CTL_FIND_SUBJECT = 0x00000004;
}

/// {@category Enum}
class CERT_ID_OPTION {
  static const CERT_ID_ISSUER_SERIAL_NUMBER = 0x00000001;
  static const CERT_ID_KEY_IDENTIFIER = 0x00000002;
  static const CERT_ID_SHA1_HASH = 0x00000003;
}

/// {@category Enum}
class CERT_KEY_SPEC {
  static const AT_KEYEXCHANGE = 0x00000001;
  static const AT_SIGNATURE = 0x00000002;
  static const CERT_NCRYPT_KEY_SPEC = 0xffffffff;
}

/// {@category Enum}
class CERT_LOGOTYPE_CHOICE {
  static const CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE = 0x00000000;
  static const CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE = 0x00000001;
  static const CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE = 0x00000002;
}

/// {@category Enum}
class CERT_LOGOTYPE_IMAGE_INFO_TYPE {
  static const CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE = 0x00000001;
  static const CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE = 0x00000002;
}

/// {@category Enum}
class CERT_LOGOTYPE_OPTION {
  static const CERT_LOGOTYPE_DIRECT_INFO_CHOICE = 0x00000001;
  static const CERT_LOGOTYPE_INDIRECT_INFO_CHOICE = 0x00000002;
}

/// {@category Enum}
class CERT_OPEN_STORE_FLAGS {
  static const CERT_STORE_BACKUP_RESTORE_FLAG = 0x00000800;
  static const CERT_STORE_CREATE_NEW_FLAG = 0x00002000;
  static const CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG = 0x00000004;
  static const CERT_STORE_DELETE_FLAG = 0x00000010;
  static const CERT_STORE_ENUM_ARCHIVED_FLAG = 0x00000200;
  static const CERT_STORE_MAXIMUM_ALLOWED_FLAG = 0x00001000;
  static const CERT_STORE_NO_CRYPT_RELEASE_FLAG = 0x00000001;
  static const CERT_STORE_OPEN_EXISTING_FLAG = 0x00004000;
  static const CERT_STORE_READONLY_FLAG = 0x00008000;
  static const CERT_STORE_SET_LOCALIZED_NAME_FLAG = 0x00000002;
  static const CERT_STORE_SHARE_CONTEXT_FLAG = 0x00000080;
  static const CERT_STORE_UPDATE_KEYID_FLAG = 0x00000400;
}

/// {@category Enum}
class CERT_QUERY_CONTENT_TYPE {
  static const CERT_QUERY_CONTENT_CERT = 0x00000001;
  static const CERT_QUERY_CONTENT_CTL = 0x00000002;
  static const CERT_QUERY_CONTENT_CRL = 0x00000003;
  static const CERT_QUERY_CONTENT_SERIALIZED_STORE = 0x00000004;
  static const CERT_QUERY_CONTENT_SERIALIZED_CERT = 0x00000005;
  static const CERT_QUERY_CONTENT_SERIALIZED_CTL = 0x00000006;
  static const CERT_QUERY_CONTENT_SERIALIZED_CRL = 0x00000007;
  static const CERT_QUERY_CONTENT_PKCS7_SIGNED = 0x00000008;
  static const CERT_QUERY_CONTENT_PKCS7_UNSIGNED = 0x00000009;
  static const CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED = 0x0000000a;
  static const CERT_QUERY_CONTENT_PKCS10 = 0x0000000b;
  static const CERT_QUERY_CONTENT_PFX = 0x0000000c;
  static const CERT_QUERY_CONTENT_CERT_PAIR = 0x0000000d;
  static const CERT_QUERY_CONTENT_PFX_AND_LOAD = 0x0000000e;
}

/// {@category Enum}
class CERT_QUERY_CONTENT_TYPE_FLAGS {
  static const CERT_QUERY_CONTENT_FLAG_CERT = 0x00000002;
  static const CERT_QUERY_CONTENT_FLAG_CTL = 0x00000004;
  static const CERT_QUERY_CONTENT_FLAG_CRL = 0x00000008;
  static const CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE = 0x00000010;
  static const CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT = 0x00000020;
  static const CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL = 0x00000040;
  static const CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL = 0x00000080;
  static const CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED = 0x00000100;
  static const CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED = 0x00000200;
  static const CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED = 0x00000400;
  static const CERT_QUERY_CONTENT_FLAG_PKCS10 = 0x00000800;
  static const CERT_QUERY_CONTENT_FLAG_PFX = 0x00001000;
  static const CERT_QUERY_CONTENT_FLAG_CERT_PAIR = 0x00002000;
  static const CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD = 0x00004000;
  static const CERT_QUERY_CONTENT_FLAG_ALL = 0x00003ffe;
  static const CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT = 0x00000332;
}

/// {@category Enum}
class CERT_QUERY_ENCODING_TYPE {
  static const X509_ASN_ENCODING = 0x00000001;
  static const PKCS_7_ASN_ENCODING = 0x00010000;
}

/// {@category Enum}
class CERT_QUERY_FORMAT_TYPE {
  static const CERT_QUERY_FORMAT_BINARY = 0x00000001;
  static const CERT_QUERY_FORMAT_BASE64_ENCODED = 0x00000002;
  static const CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED = 0x00000003;
}

/// {@category Enum}
class CERT_QUERY_FORMAT_TYPE_FLAGS {
  static const CERT_QUERY_FORMAT_FLAG_BINARY = 0x00000002;
  static const CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED = 0x00000004;
  static const CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED = 0x00000008;
  static const CERT_QUERY_FORMAT_FLAG_ALL = 0x0000000e;
}

/// {@category Enum}
class CERT_QUERY_OBJECT_TYPE {
  static const CERT_QUERY_OBJECT_FILE = 0x00000001;
  static const CERT_QUERY_OBJECT_BLOB = 0x00000002;
}

/// {@category Enum}
class CERT_RDN_ATTR_VALUE_TYPE {
  static const CERT_RDN_ANY_TYPE = 0x00000000;
  static const CERT_RDN_NUMERIC_STRING = 0x00000003;
  static const CERT_RDN_PRINTABLE_STRING = 0x00000004;
  static const CERT_RDN_T61_STRING = 0x00000005;
  static const CERT_RDN_VIDEOTEX_STRING = 0x00000006;
  static const CERT_RDN_IA5_STRING = 0x00000007;
  static const CERT_RDN_GRAPHIC_STRING = 0x00000008;
  static const CERT_RDN_ISO646_STRING = 0x00000009;
  static const CERT_RDN_GENERAL_STRING = 0x0000000a;
  static const CERT_RDN_INT4_STRING = 0x0000000b;
  static const CERT_RDN_UNICODE_STRING = 0x0000000c;
  static const CERT_RDN_BMP_STRING = 0x0000000c;
  static const CERT_RDN_ENCODED_BLOB = 0x00000001;
  static const CERT_RDN_OCTET_STRING = 0x00000002;
  static const CERT_RDN_TELETEX_STRING = 0x00000005;
  static const CERT_RDN_UNIVERSAL_STRING = 0x0000000b;
  static const CERT_RDN_UTF8_STRING = 0x0000000d;
  static const CERT_RDN_VISIBLE_STRING = 0x00000009;
}

/// {@category Enum}
class CERT_REVOCATION_STATUS_REASON {
  static const CRL_REASON_UNSPECIFIED = 0x00000000;
  static const CRL_REASON_KEY_COMPROMISE = 0x00000001;
  static const CRL_REASON_CA_COMPROMISE = 0x00000002;
  static const CRL_REASON_AFFILIATION_CHANGED = 0x00000003;
  static const CRL_REASON_SUPERSEDED = 0x00000004;
  static const CRL_REASON_CESSATION_OF_OPERATION = 0x00000005;
  static const CRL_REASON_CERTIFICATE_HOLD = 0x00000006;
  static const CRL_REASON_REMOVE_FROM_CRL = 0x00000008;
}

/// {@category Enum}
class CERT_ROOT_PROGRAM_FLAGS {
  static const CERT_ROOT_PROGRAM_FLAG_LSC = 0x00000040;
  static const CERT_ROOT_PROGRAM_FLAG_ORG = 0x00000080;
  static const CERT_ROOT_PROGRAM_FLAG_SUBJECT_LOGO = 0x00000020;
}

/// {@category Enum}
class CERT_SELECT_CRITERIA_TYPE {
  static const CERT_SELECT_BY_ENHKEY_USAGE = 0x00000001;
  static const CERT_SELECT_BY_KEY_USAGE = 0x00000002;
  static const CERT_SELECT_BY_POLICY_OID = 0x00000003;
  static const CERT_SELECT_BY_PROV_NAME = 0x00000004;
  static const CERT_SELECT_BY_EXTENSION = 0x00000005;
  static const CERT_SELECT_BY_SUBJECT_HOST_NAME = 0x00000006;
  static const CERT_SELECT_BY_ISSUER_ATTR = 0x00000007;
  static const CERT_SELECT_BY_SUBJECT_ATTR = 0x00000008;
  static const CERT_SELECT_BY_ISSUER_NAME = 0x00000009;
  static const CERT_SELECT_BY_PUBLIC_KEY = 0x0000000a;
  static const CERT_SELECT_BY_TLS_SIGNATURES = 0x0000000b;
}

/// {@category Enum}
class CERT_STORE_PROV_FLAGS {
  static const CERT_STORE_PROV_EXTERNAL_FLAG = 0x00000001;
  static const CERT_STORE_PROV_DELETED_FLAG = 0x00000002;
  static const CERT_STORE_PROV_NO_PERSIST_FLAG = 0x00000004;
  static const CERT_STORE_PROV_SYSTEM_STORE_FLAG = 0x00000008;
  static const CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG = 0x00000010;
}

/// {@category Enum}
class CERT_STORE_SAVE_AS {
  static const CERT_STORE_SAVE_AS_PKCS7 = 0x00000002;
  static const CERT_STORE_SAVE_AS_STORE = 0x00000001;
}

/// {@category Enum}
class CERT_STORE_SAVE_TO {
  static const CERT_STORE_SAVE_TO_FILE = 0x00000001;
  static const CERT_STORE_SAVE_TO_FILENAME = 0x00000004;
  static const CERT_STORE_SAVE_TO_FILENAME_A = 0x00000003;
  static const CERT_STORE_SAVE_TO_FILENAME_W = 0x00000004;
  static const CERT_STORE_SAVE_TO_MEMORY = 0x00000002;
}

/// {@category Enum}
class CERT_STRING_TYPE {
  static const CERT_SIMPLE_NAME_STR = 0x00000001;
  static const CERT_OID_NAME_STR = 0x00000002;
  static const CERT_X500_NAME_STR = 0x00000003;
}

/// {@category Enum}
class CERT_STRONG_SIGN_FLAGS {
  static const CERT_STRONG_SIGN_ENABLE_CRL_CHECK = 0x00000001;
  static const CERT_STRONG_SIGN_ENABLE_OCSP_CHECK = 0x00000002;
}

/// {@category Enum}
class CERT_SYSTEM_STORE_FLAGS {
  static const CERT_SYSTEM_STORE_LOCATION_MASK = 0x00ff0000;
  static const CERT_SYSTEM_STORE_RELOCATE_FLAG = 0x80000000;
}

/// {@category Enum}
class CESSetupProperty {
  static const ENUM_CESSETUPPROP_USE_IISAPPPOOLIDENTITY = 0x00000000;
  static const ENUM_CESSETUPPROP_CACONFIG = 0x00000001;
  static const ENUM_CESSETUPPROP_AUTHENTICATION = 0x00000002;
  static const ENUM_CESSETUPPROP_SSLCERTHASH = 0x00000003;
  static const ENUM_CESSETUPPROP_URL = 0x00000004;
  static const ENUM_CESSETUPPROP_RENEWALONLY = 0x00000005;
  static const ENUM_CESSETUPPROP_ALLOW_KEYBASED_RENEWAL = 0x00000006;
}

/// {@category Enum}
class CMSG_KEY_AGREE_OPTION {
  static const CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE = 0x00000001;
  static const CMSG_KEY_AGREE_STATIC_KEY_CHOICE = 0x00000002;
}

/// {@category Enum}
class CMSG_KEY_AGREE_ORIGINATOR {
  static const CMSG_KEY_AGREE_ORIGINATOR_CERT = 0x00000001;
  static const CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY = 0x00000002;
}

/// {@category Enum}
class CRYPT_ACQUIRE_FLAGS {
  static const CRYPT_ACQUIRE_CACHE_FLAG = 0x00000001;
  static const CRYPT_ACQUIRE_COMPARE_KEY_FLAG = 0x00000004;
  static const CRYPT_ACQUIRE_NO_HEALING = 0x00000008;
  static const CRYPT_ACQUIRE_SILENT_FLAG = 0x00000040;
  static const CRYPT_ACQUIRE_USE_PROV_INFO_FLAG = 0x00000002;
}

/// {@category Enum}
class CRYPT_CONTEXT_CONFIG_FLAGS {
  static const CRYPT_EXCLUSIVE = 0x00000001;
  static const CRYPT_OVERRIDE = 0x00010000;
}

/// {@category Enum}
class CRYPT_DEFAULT_CONTEXT_FLAGS {
  static const CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG = 0x00000001;
  static const CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG = 0x00000002;
}

/// {@category Enum}
class CRYPT_DEFAULT_CONTEXT_TYPE {
  static const CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID = 0x00000001;
  static const CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID = 0x00000002;
}

/// {@category Enum}
class CRYPT_ENCODE_OBJECT_FLAGS {
  static const CRYPT_ENCODE_ALLOC_FLAG = 0x00008000;
  static const CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG = 0x00020000;
  static const CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG = 0x40000000;
  static const CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG = 0x80000000;
  static const CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG = 0x20000000;
}

/// {@category Enum}
class CRYPT_FIND_FLAGS {
  static const CRYPT_FIND_USER_KEYSET_FLAG = 0x00000001;
  static const CRYPT_FIND_MACHINE_KEYSET_FLAG = 0x00000002;
  static const CRYPT_FIND_SILENT_KEYSET_FLAG = 0x00000040;
}

/// {@category Enum}
class CRYPT_GET_URL_FLAGS {
  static const CRYPT_GET_URL_FROM_PROPERTY = 0x00000001;
  static const CRYPT_GET_URL_FROM_EXTENSION = 0x00000002;
  static const CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE = 0x00000004;
  static const CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE = 0x00000008;
}

/// {@category Enum}
class CRYPT_IMAGE_REF_FLAGS {
  static const CRYPT_MIN_DEPENDENCIES = 0x00000001;
  static const CRYPT_PROCESS_ISOLATE = 0x00010000;
}

/// {@category Enum}
class CRYPT_IMPORT_PUBLIC_KEY_FLAGS {
  static const CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = 0x80000000;
  static const CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = 0x40000000;
}

/// {@category Enum}
class CRYPT_KEY_FLAGS {
  static const CRYPT_EXPORTABLE = 0x00000001;
  static const CRYPT_USER_PROTECTED = 0x00000002;
  static const CRYPT_ARCHIVABLE = 0x00004000;
  static const CRYPT_CREATE_IV = 0x00000200;
  static const CRYPT_CREATE_SALT = 0x00000004;
  static const CRYPT_DATA_KEY = 0x00000800;
  static const CRYPT_FORCE_KEY_PROTECTION_HIGH = 0x00008000;
  static const CRYPT_KEK = 0x00000400;
  static const CRYPT_INITIATOR = 0x00000040;
  static const CRYPT_NO_SALT = 0x00000010;
  static const CRYPT_ONLINE = 0x00000080;
  static const CRYPT_PREGEN = 0x00000040;
  static const CRYPT_RECIPIENT = 0x00000010;
  static const CRYPT_SF = 0x00000100;
  static const CRYPT_SGCKEY = 0x00002000;
  static const CRYPT_VOLATILE = 0x00001000;
  static const CRYPT_MACHINE_KEYSET = 0x00000020;
  static const CRYPT_USER_KEYSET = 0x00001000;
  static const PKCS12_PREFER_CNG_KSP = 0x00000100;
  static const PKCS12_ALWAYS_CNG_KSP = 0x00000200;
  static const PKCS12_ALLOW_OVERWRITE_KEY = 0x00004000;
  static const PKCS12_NO_PERSIST_KEY = 0x00008000;
  static const PKCS12_INCLUDE_EXTENDED_PROPERTIES = 0x00000010;
  static const CRYPT_OAEP = 0x00000040;
  static const CRYPT_BLOB_VER3 = 0x00000080;
  static const CRYPT_DESTROYKEY = 0x00000004;
  static const CRYPT_SSL2_FALLBACK = 0x00000002;
  static const CRYPT_Y_ONLY = 0x00000001;
  static const CRYPT_IPSEC_HMAC_KEY = 0x00000100;
  static const CERT_SET_KEY_PROV_HANDLE_PROP_ID = 0x00000001;
  static const CERT_SET_KEY_CONTEXT_PROP_ID = 0x00000001;
}

/// {@category Enum}
class CRYPT_KEY_PARAM_ID {
  static const KP_ALGID = 0x00000007;
  static const KP_CERTIFICATE = 0x0000001a;
  static const KP_PERMISSIONS = 0x00000006;
  static const KP_SALT = 0x00000002;
  static const KP_SALT_EX = 0x0000000a;
  static const KP_BLOCKLEN = 0x00000008;
  static const KP_GET_USE_COUNT = 0x0000002a;
  static const KP_KEYLEN = 0x00000009;
}

/// {@category Enum}
class CRYPT_MSG_TYPE {
  static const CMSG_DATA = 0x00000001;
  static const CMSG_SIGNED = 0x00000002;
  static const CMSG_ENVELOPED = 0x00000003;
  static const CMSG_SIGNED_AND_ENVELOPED = 0x00000004;
  static const CMSG_HASHED = 0x00000005;
}

/// {@category Enum}
class CRYPT_OBJECT_LOCATOR_RELEASE_REASON {
  static const CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN = 0x00000001;
  static const CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP = 0x00000002;
  static const CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT = 0x00000003;
  static const CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD = 0x00000004;
}

/// {@category Enum}
class CRYPT_SET_HASH_PARAM {
  static const HP_HMAC_INFO = 0x00000005;
  static const HP_HASHVAL = 0x00000002;
}

/// {@category Enum}
class CRYPT_SET_PROV_PARAM_ID {
  static const PP_CLIENT_HWND = 0x00000001;
  static const PP_DELETEKEY = 0x00000018;
  static const PP_KEYEXCHANGE_ALG = 0x0000000e;
  static const PP_KEYEXCHANGE_PIN = 0x00000020;
  static const PP_KEYEXCHANGE_KEYSIZE = 0x0000000c;
  static const PP_KEYSET_SEC_DESCR = 0x00000008;
  static const PP_PIN_PROMPT_STRING = 0x0000002c;
  static const PP_ROOT_CERTSTORE = 0x0000002e;
  static const PP_SIGNATURE_ALG = 0x0000000f;
  static const PP_SIGNATURE_PIN = 0x00000021;
  static const PP_SIGNATURE_KEYSIZE = 0x0000000d;
  static const PP_UI_PROMPT = 0x00000015;
  static const PP_USE_HARDWARE_RNG = 0x00000026;
  static const PP_USER_CERTSTORE = 0x0000002a;
  static const PP_SECURE_KEYEXCHANGE_PIN = 0x0000002f;
  static const PP_SECURE_SIGNATURE_PIN = 0x00000030;
  static const PP_SMARTCARD_READER = 0x0000002b;
}

/// {@category Enum}
class CRYPT_STRING {
  static const CRYPT_STRING_BASE64HEADER = 0x00000000;
  static const CRYPT_STRING_BASE64 = 0x00000001;
  static const CRYPT_STRING_BINARY = 0x00000002;
  static const CRYPT_STRING_BASE64REQUESTHEADER = 0x00000003;
  static const CRYPT_STRING_HEX = 0x00000004;
  static const CRYPT_STRING_HEXASCII = 0x00000005;
  static const CRYPT_STRING_BASE64X509CRLHEADER = 0x00000009;
  static const CRYPT_STRING_HEXADDR = 0x0000000a;
  static const CRYPT_STRING_HEXASCIIADDR = 0x0000000b;
  static const CRYPT_STRING_HEXRAW = 0x0000000c;
  static const CRYPT_STRING_STRICT = 0x20000000;
  static const CRYPT_STRING_BASE64_ANY = 0x00000006;
  static const CRYPT_STRING_ANY = 0x00000007;
  static const CRYPT_STRING_HEX_ANY = 0x00000008;
}

/// {@category Enum}
class CRYPT_TIMESTAMP_RESPONSE_STATUS {
  static const TIMESTAMP_STATUS_GRANTED = 0x00000000;
  static const TIMESTAMP_STATUS_GRANTED_WITH_MODS = 0x00000001;
  static const TIMESTAMP_STATUS_REJECTED = 0x00000002;
  static const TIMESTAMP_STATUS_WAITING = 0x00000003;
  static const TIMESTAMP_STATUS_REVOCATION_WARNING = 0x00000004;
  static const TIMESTAMP_STATUS_REVOKED = 0x00000005;
}

/// {@category Enum}
class CRYPT_TIMESTAMP_VERSION {
  static const TIMESTAMP_VERSION = 0x00000001;
}

/// {@category Enum}
class CRYPT_VERIFY_CERT_FLAGS {
  static const CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG = 0x00000001;
  static const CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG = 0x00000002;
  static const CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG =
      0x00000004;
}

/// {@category Enum}
class CRYPT_XML_CHARSET {
  static const CRYPT_XML_CHARSET_AUTO = 0x00000000;
  static const CRYPT_XML_CHARSET_UTF8 = 0x00000001;
  static const CRYPT_XML_CHARSET_UTF16LE = 0x00000002;
  static const CRYPT_XML_CHARSET_UTF16BE = 0x00000003;
}

/// {@category Enum}
class CRYPT_XML_FLAGS {
  static const CRYPT_XML_FLAG_DISABLE_EXTENSIONS = 0x10000000;
  static const CRYPT_XML_FLAG_NO_SERIALIZE = 0x80000000;
  static const CRYPT_XML_SIGN_ADD_KEYVALUE = 0x00000001;
}

/// {@category Enum}
class CRYPT_XML_GROUP_ID {
  static const CRYPT_XML_GROUP_ID_HASH_________ = 0x00000001;
  static const CRYPT_XML_GROUP_ID_SIGN_________ = 0x00000002;
}

/// {@category Enum}
class CRYPT_XML_KEYINFO_SPEC {
  static const CRYPT_XML_KEYINFO_SPEC_NONE = 0x00000000;
  static const CRYPT_XML_KEYINFO_SPEC_ENCODED = 0x00000001;
  static const CRYPT_XML_KEYINFO_SPEC_PARAM = 0x00000002;
}

/// {@category Enum}
class CRYPT_XML_KEYINFO_TYPE {
  static const CRYPT_XML_KEYINFO_TYPE_KEYNAME = 0x00000001;
  static const CRYPT_XML_KEYINFO_TYPE_KEYVALUE = 0x00000002;
  static const CRYPT_XML_KEYINFO_TYPE_RETRIEVAL = 0x00000003;
  static const CRYPT_XML_KEYINFO_TYPE_X509DATA = 0x00000004;
  static const CRYPT_XML_KEYINFO_TYPE_CUSTOM = 0x00000005;
}

/// {@category Enum}
class CRYPT_XML_KEY_VALUE_TYPE {
  static const CRYPT_XML_KEY_VALUE_TYPE_DSA = 0x00000001;
  static const CRYPT_XML_KEY_VALUE_TYPE_RSA = 0x00000002;
  static const CRYPT_XML_KEY_VALUE_TYPE_ECDSA = 0x00000003;
  static const CRYPT_XML_KEY_VALUE_TYPE_CUSTOM = 0x00000004;
}

/// {@category Enum}
class CRYPT_XML_PROPERTY_ID {
  static const CRYPT_XML_PROPERTY_MAX_HEAP_SIZE = 0x00000001;
  static const CRYPT_XML_PROPERTY_SIGNATURE_LOCATION = 0x00000002;
  static const CRYPT_XML_PROPERTY_MAX_SIGNATURES = 0x00000003;
  static const CRYPT_XML_PROPERTY_DOC_DECLARATION = 0x00000004;
  static const CRYPT_XML_PROPERTY_XML_OUTPUT_CHARSET = 0x00000005;
}

/// {@category Enum}
class CRYPT_XML_STATUS_ERROR_STATUS {
  static const CRYPT_XML_STATUS_ERROR_NOT_RESOLVED = 0x00000001;
  static const CRYPT_XML_STATUS_ERROR_DIGEST_INVALID = 0x00000002;
  static const CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_ALGORITHM = 0x00000005;
  static const CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_TRANSFORM = 0x00000008;
  static const CRYPT_XML_STATUS_ERROR_SIGNATURE_INVALID = 0x00010000;
  static const CRYPT_XML_STATUS_ERROR_KEYINFO_NOT_PARSED = 0x00020000;
}

/// {@category Enum}
class CRYPT_XML_STATUS_INFO_STATUS {
  static const CRYPT_XML_STATUS_INTERNAL_REFERENCE = 0x00000001;
  static const CRYPT_XML_STATUS_KEY_AVAILABLE = 0x00000002;
  static const CRYPT_XML_STATUS_DIGESTING = 0x00000004;
  static const CRYPT_XML_STATUS_DIGEST_VALID = 0x00000008;
  static const CRYPT_XML_STATUS_SIGNATURE_VALID = 0x00010000;
  static const CRYPT_XML_STATUS_OPENED_TO_ENCODE = 0x80000000;
}

/// {@category Enum}
class CRYPT_XML_TRANSFORM_FLAGS {
  static const CRYPT_XML_TRANSFORM_ON_STREAM = 0x00000001;
  static const CRYPT_XML_TRANSFORM_ON_NODESET = 0x00000002;
  static const CRYPT_XML_TRANSFORM_URI_QUERY_STRING = 0x00000003;
}

/// {@category Enum}
class CRYPT_XML_X509DATA_TYPE {
  static const CRYPT_XML_X509DATA_TYPE_ISSUER_SERIAL = 0x00000001;
  static const CRYPT_XML_X509DATA_TYPE_SKI = 0x00000002;
  static const CRYPT_XML_X509DATA_TYPE_SUBJECT_NAME = 0x00000003;
  static const CRYPT_XML_X509DATA_TYPE_CERTIFICATE = 0x00000004;
  static const CRYPT_XML_X509DATA_TYPE_CRL = 0x00000005;
  static const CRYPT_XML_X509DATA_TYPE_CUSTOM = 0x00000006;
}

/// {@category Enum}
class CertKeyType {
  static const KeyTypeOther = 0x00000000;
  static const KeyTypeVirtualSmartCard = 0x00000001;
  static const KeyTypePhysicalSmartCard = 0x00000002;
  static const KeyTypePassport = 0x00000003;
  static const KeyTypePassportRemote = 0x00000004;
  static const KeyTypePassportSmartCard = 0x00000005;
  static const KeyTypeHardware = 0x00000006;
  static const KeyTypeSoftware = 0x00000007;
  static const KeyTypeSelfSigned = 0x00000008;
}

/// {@category Enum}
class DSAFIPSVERSION_ENUM {
  static const DSA_FIPS186_2 = 0x00000000;
  static const DSA_FIPS186_3 = 0x00000001;
}

/// {@category Enum}
class Direction {
  static const DirectionEncrypt = 0x00000001;
  static const DirectionDecrypt = 0x00000002;
}

/// {@category Enum}
class ECC_CURVE_ALG_ID_ENUM {
  static const BCRYPT_NO_CURVE_GENERATION_ALG_ID = 0x00000000;
}

/// {@category Enum}
class ECC_CURVE_TYPE_ENUM {
  static const BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = 0x00000001;
  static const BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = 0x00000002;
  static const BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = 0x00000003;
}

/// {@category Enum}
class HASHALGORITHM_ENUM {
  static const DSA_HASH_ALGORITHM_SHA1 = 0x00000000;
  static const DSA_HASH_ALGORITHM_SHA256 = 0x00000001;
  static const DSA_HASH_ALGORITHM_SHA512 = 0x00000002;
}

/// {@category Enum}
class HTTPSPOLICY_CALLBACK_DATA_AUTH_TYPE {
  static const AUTHTYPE_CLIENT = 0x00000001;
  static const AUTHTYPE_SERVER = 0x00000002;
}

/// {@category Enum}
class HandleType {
  static const Asymmetric = 0x00000001;
  static const Symmetric = 0x00000002;
  static const Transform = 0x00000003;
  static const Hash = 0x00000004;
}

/// {@category Enum}
class MSCEPSetupProperty {
  static const ENUM_CEPSETUPPROP_USELOCALSYSTEM = 0x00000000;
  static const ENUM_CEPSETUPPROP_USECHALLENGE = 0x00000001;
  static const ENUM_CEPSETUPPROP_RANAME_CN = 0x00000002;
  static const ENUM_CEPSETUPPROP_RANAME_EMAIL = 0x00000003;
  static const ENUM_CEPSETUPPROP_RANAME_COMPANY = 0x00000004;
  static const ENUM_CEPSETUPPROP_RANAME_DEPT = 0x00000005;
  static const ENUM_CEPSETUPPROP_RANAME_CITY = 0x00000006;
  static const ENUM_CEPSETUPPROP_RANAME_STATE = 0x00000007;
  static const ENUM_CEPSETUPPROP_RANAME_COUNTRY = 0x00000008;
  static const ENUM_CEPSETUPPROP_SIGNINGKEYINFORMATION = 0x00000009;
  static const ENUM_CEPSETUPPROP_EXCHANGEKEYINFORMATION = 0x0000000a;
  static const ENUM_CEPSETUPPROP_CAINFORMATION = 0x0000000b;
  static const ENUM_CEPSETUPPROP_MSCEPURL = 0x0000000c;
  static const ENUM_CEPSETUPPROP_CHALLENGEURL = 0x0000000d;
}

/// {@category Enum}
class NCRYPT_ALGORITHM_NAME_CLASS {
  static const NCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 0x00000003;
  static const NCRYPT_SECRET_AGREEMENT_INTERFACE = 0x00000004;
  static const NCRYPT_SIGNATURE_INTERFACE = 0x00000005;
}

/// {@category Enum}
class NCRYPT_FLAGS {
  static const BCRYPT_PAD_NONE = 0x00000001;
  static const BCRYPT_PAD_OAEP = 0x00000004;
  static const BCRYPT_PAD_PKCS1 = 0x00000002;
  static const BCRYPT_PAD_PSS = 0x00000008;
  static const NCRYPT_SILENT_FLAG = 0x00000040;
  static const NCRYPT_NO_PADDING_FLAG = 0x00000001;
  static const NCRYPT_PAD_OAEP_FLAG = 0x00000004;
  static const NCRYPT_PAD_PKCS1_FLAG = 0x00000002;
  static const NCRYPT_REGISTER_NOTIFY_FLAG = 0x00000001;
  static const NCRYPT_UNREGISTER_NOTIFY_FLAG = 0x00000002;
  static const NCRYPT_MACHINE_KEY_FLAG = 0x00000020;
  static const NCRYPT_UNPROTECT_NO_DECRYPT = 0x00000001;
  static const NCRYPT_OVERWRITE_KEY_FLAG = 0x00000080;
  static const NCRYPT_NO_KEY_VALIDATION = 0x00000008;
  static const NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG = 0x00000200;
  static const NCRYPT_PAD_PSS_FLAG = 0x00000008;
  static const NCRYPT_PERSIST_FLAG = 0x80000000;
  static const NCRYPT_PERSIST_ONLY_FLAG = 0x40000000;
}

/// {@category Enum}
class NCRYPT_OPERATION {
  static const NCRYPT_CIPHER_OPERATION = 0x00000001;
  static const NCRYPT_HASH_OPERATION = 0x00000002;
  static const NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 0x00000004;
  static const NCRYPT_SECRET_AGREEMENT_OPERATION = 0x00000008;
  static const NCRYPT_SIGNATURE_OPERATION = 0x00000010;
}

/// {@category Enum}
class PaddingMode {
  static const None = 0x00000001;
  static const PKCS7 = 0x00000002;
  static const Zeros = 0x00000003;
  static const ANSIX923 = 0x00000004;
  static const ISO10126 = 0x00000005;
}
