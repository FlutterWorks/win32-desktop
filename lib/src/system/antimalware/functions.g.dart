// Maps FFI prototypes onto the corresponding Win32 API function calls

// THIS FILE IS GENERATED AUTOMATICALLY AND SHOULD NOT BE EDITED DIRECTLY.

// ignore_for_file: camel_case_extensions, camel_case_types
// ignore_for_file: directives_ordering, unnecessary_getters_setters
// ignore_for_file: unused_field, unused_import

import 'dart:ffi';

import 'package:ffi/ffi.dart';

import 'enums.g.dart';

import '../../combase.dart';
import '../../guid.dart';
import '../../system/antimalware/structs.g.dart';
import '../../foundation/structs.g.dart'; // -----------------------------------------------------------------------

// amsi.dll
// -----------------------------------------------------------------------
final _amsi = DynamicLibrary.open('amsi.dll');

void AmsiCloseSession(int amsiContext, int amsiSession) =>
    _AmsiCloseSession(amsiContext, amsiSession);

late final _AmsiCloseSession = _amsi.lookupFunction<
    Void Function(IntPtr amsiContext, IntPtr amsiSession),
    void Function(int amsiContext, int amsiSession)>('AmsiCloseSession');

int AmsiInitialize(Pointer<Utf16> appName, Pointer<IntPtr> amsiContext) =>
    _AmsiInitialize(appName, amsiContext);

late final _AmsiInitialize = _amsi.lookupFunction<
    Int32 Function(Pointer<Utf16> appName, Pointer<IntPtr> amsiContext),
    int Function(
        Pointer<Utf16> appName, Pointer<IntPtr> amsiContext)>('AmsiInitialize');

int AmsiNotifyOperation(int amsiContext, Pointer buffer, int length,
        Pointer<Utf16> contentName, Pointer<Int32> result) =>
    _AmsiNotifyOperation(amsiContext, buffer, length, contentName, result);

late final _AmsiNotifyOperation = _amsi.lookupFunction<
    Int32 Function(IntPtr amsiContext, Pointer buffer, Uint32 length,
        Pointer<Utf16> contentName, Pointer<Int32> result),
    int Function(
        int amsiContext,
        Pointer buffer,
        int length,
        Pointer<Utf16> contentName,
        Pointer<Int32> result)>('AmsiNotifyOperation');

int AmsiOpenSession(int amsiContext, Pointer<IntPtr> amsiSession) =>
    _AmsiOpenSession(amsiContext, amsiSession);

late final _AmsiOpenSession = _amsi.lookupFunction<
    Int32 Function(IntPtr amsiContext, Pointer<IntPtr> amsiSession),
    int Function(
        int amsiContext, Pointer<IntPtr> amsiSession)>('AmsiOpenSession');

int AmsiScanBuffer(int amsiContext, Pointer buffer, int length,
        Pointer<Utf16> contentName, int amsiSession, Pointer<Int32> result) =>
    _AmsiScanBuffer(
        amsiContext, buffer, length, contentName, amsiSession, result);

late final _AmsiScanBuffer = _amsi.lookupFunction<
    Int32 Function(IntPtr amsiContext, Pointer buffer, Uint32 length,
        Pointer<Utf16> contentName, IntPtr amsiSession, Pointer<Int32> result),
    int Function(
        int amsiContext,
        Pointer buffer,
        int length,
        Pointer<Utf16> contentName,
        int amsiSession,
        Pointer<Int32> result)>('AmsiScanBuffer');

int AmsiScanString(int amsiContext, Pointer<Utf16> string,
        Pointer<Utf16> contentName, int amsiSession, Pointer<Int32> result) =>
    _AmsiScanString(amsiContext, string, contentName, amsiSession, result);

late final _AmsiScanString = _amsi.lookupFunction<
    Int32 Function(IntPtr amsiContext, Pointer<Utf16> string,
        Pointer<Utf16> contentName, IntPtr amsiSession, Pointer<Int32> result),
    int Function(
        int amsiContext,
        Pointer<Utf16> string,
        Pointer<Utf16> contentName,
        int amsiSession,
        Pointer<Int32> result)>('AmsiScanString');

void AmsiUninitialize(int amsiContext) => _AmsiUninitialize(amsiContext);

late final _AmsiUninitialize = _amsi.lookupFunction<
    Void Function(IntPtr amsiContext),
    void Function(int amsiContext)>('AmsiUninitialize');

// -----------------------------------------------------------------------
// kernel32.dll
// -----------------------------------------------------------------------
final _kernel32 = DynamicLibrary.open('kernel32.dll');

int InstallELAMCertificateInfo(int ELAMFile) =>
    _InstallELAMCertificateInfo(ELAMFile);

late final _InstallELAMCertificateInfo = _kernel32.lookupFunction<
    Int32 Function(IntPtr ELAMFile),
    int Function(int ELAMFile)>('InstallELAMCertificateInfo');
