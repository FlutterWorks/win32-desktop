// IAntimalwareProvider.dart

// THIS FILE IS GENERATED AUTOMATICALLY AND SHOULD NOT BE EDITED DIRECTLY.

// ignore_for_file: unused_import, directives_ordering

import 'dart:ffi';

import 'package:ffi/ffi.dart';

import '../../combase.dart';
import '../../constants.dart';
import '../../exceptions.dart';
import '../../guid.dart';
import '../../macros.dart';
import '../../ole32.dart';
import '../../utils.dart';

import '../../system/com/IUnknown.dart';
import '../../system/antimalware/IAmsiStream.dart';
import '../../system/antimalware/structs.g.dart';
import '../../foundation/structs.g.dart';

/// @nodoc
const IID_IAntimalwareProvider = '{B2CABFE3-FE04-42B1-A5DF-08D483D4D125}';

/// {@category Interface}
/// {@category com}
class IAntimalwareProvider extends IUnknown {
  // vtable begins at 3, is 3 entries long.
  IAntimalwareProvider(Pointer<COMObject> ptr) : super(ptr);

  int Scan(Pointer<COMObject> stream, Pointer<Int32> result) => ptr
      .ref.lpVtbl.value
      .elementAt(3)
      .cast<
          Pointer<
              NativeFunction<
                  Int32 Function(Pointer, Pointer<COMObject> stream,
                      Pointer<Int32> result)>>>()
      .value
      .asFunction<
          int Function(Pointer, Pointer<COMObject> stream,
              Pointer<Int32> result)>()(ptr.ref.lpVtbl, stream, result);

  void CloseSession(int session) => ptr.ref.lpVtbl.value
      .elementAt(4)
      .cast<Pointer<NativeFunction<Void Function(Pointer, Uint64 session)>>>()
      .value
      .asFunction<
          void Function(Pointer, int session)>()(ptr.ref.lpVtbl, session);

  int DisplayName(Pointer<Pointer<Utf16>> displayName) => ptr.ref.lpVtbl.value
          .elementAt(5)
          .cast<
              Pointer<
                  NativeFunction<
                      Int32 Function(
                          Pointer, Pointer<Pointer<Utf16>> displayName)>>>()
          .value
          .asFunction<
              int Function(Pointer, Pointer<Pointer<Utf16>> displayName)>()(
      ptr.ref.lpVtbl, displayName);
}
